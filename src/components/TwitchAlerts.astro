---
import "@speed-highlight/core/themes/dark.css";
---

<div id="twitch-alerts" class="fixed inset-0 flex items-center">
    <div class="text-white h-screen w-full hidden" id="alert-container">
        <div class="alert__text">
            <code
                class="shj-lang-js alert__text__message hidden !py-4 !px-4 !font-cascadia break-words whitespace-pre-wrap"
            ></code>
        </div>
    </div>
</div>

<script>
    import { highlightAll } from "@speed-highlight/core";
    import {
        extractTokenFromHead,
        extractSocketTokenFromHead,
        createApiClient,
        createPubSubClient,
        createAuthProvider,
        createStreamLabsSocket,
        BROADCASTER_ID,
    } from "@/lib/Twitch";
    import {
        ALERTS,
        type Alert,
        type AlertVariant,
    } from "@/lib/TwitchAlertVariants.ts";
    import confetti from "canvas-confetti";

    const token = extractTokenFromHead();
    const slabsSocketToken = extractSocketTokenFromHead();
    const authProvider = createAuthProvider({ token });
    const apiClient = createApiClient({ authProvider });
    const pubSubClient = createPubSubClient({ authProvider });
    const slabsSocket = createStreamLabsSocket({ token: slabsSocketToken });

    const TIME_BETWEEN_ALERTS = 2000;
    let isProcessingQueue = false;
    const alertQueue: Alert[] = [];
    const $alertContainer = document.getElementById(
        "alert-container",
    ) as HTMLDivElement;
    const $alertMessage = document.querySelector(
        ".alert__text__message",
    ) as HTMLParagraphElement;

    const addAlert = (
        type: Alert["type"],
        variables: Record<string, string | number>,
    ) => {
        const alert = ALERTS[type];
        if (!alert) {
            console.error(`Alert type ${type} not defined in ALERTS`);
            return;
        }

        alertQueue.push({ type, variants: alert.variants, variables });
        if (!isProcessingQueue) processAlertQueue();
    };

    async function processAlert(alert: Alert): Promise<number> {
        const { type, variants, variables } = alert;
        const applicableVariants = variants.filter(
            (variant) =>
                type !== "cheer" || variant.minBits <= (variables?.bits ?? 0),
        );
        const variant = applicableVariants.reduce(
            (highest: AlertVariant | null, current: AlertVariant) =>
                !highest || (current.minBits ?? 0) > (highest.minBits ?? 0)
                    ? current
                    : highest,
            null,
        );

        if (!variant) {
            console.error("No variant found for alert", alert);
            return 0;
        }

        const replaceVariables = (template: string) =>
            !variables
                ? template
                : Object.entries(variables).reduce(
                      (str, [key, value]) =>
                          str.replace(
                              new RegExp(`\\$${key}`, "g"),
                              key === "message"
                                  ? `<p>${value}</p>`
                                  : value.toString(),
                          ),
                      template,
                  );

        if (variant.audioSrc) {
            const audio = new Audio(variant.audioSrc);
            audio.volume = variant.volume ?? 1;
            audio.onended = () => {
                if (variant.enableTTS && variables?.message) {
                    sleep(1000).then(() =>
                        playWithStreamElements(variables.message as string),
                    );
                }
            };
            audio.play();
        }

        $alertMessage.innerHTML = variant.messageTemplate
            ? replaceVariables(variant.messageTemplate)
            : "";
        $alertMessage.classList.toggle("hidden", !variant.messageTemplate);
        await highlightAll({ hideLineNumbers: false });

        $alertContainer.classList.remove("hidden", "animate-fade-out-down");
        $alertContainer.classList.add("animate-fade-in-up");

        if (variant.effect === "confetti") confetti({ particleCount: 100 });

        const duration = variant.duration ?? 5000;

        return new Promise<number>((resolve) => {
            setTimeout(() => {
                $alertContainer.classList.replace(
                    "animate-fade-in-up",
                    "animate-fade-out-down",
                );
                setTimeout(() => {
                    $alertContainer.classList.add("hidden");
                    resolve(duration);
                }, duration);
            }, duration);
        });
    }

    const sleep = (ms: number) =>
        new Promise((resolve) => setTimeout(resolve, ms));

    async function processAlertQueue() {
        if (isProcessingQueue) return;

        isProcessingQueue = true;

        while (alertQueue.length) {
            const alert = alertQueue.shift();
            if (!alert) continue;

            await processAlert(alert);
        }

        isProcessingQueue = false;
    }

    addAlert("cheer", {
        username: "username",
        bits: 222,
        message: "Holaaaa, estos son 222 bits de prueba",
    });

    const playWithStreamElements = (text: string) => {
        const audio = new Audio(
            `https://api.streamelements.com/kappa/v2/speech?voice=Enrique&text=${text}`,
        );
        audio.volume = 0.5;
        audio.play();
    };

    slabsSocket.on("connect", () => console.log("Connected to StreamLabs"));
    slabsSocket.on("event", (event: any) => {
        console.log("Event received", event);
        switch (event.type) {
            case "follow":
                addAlert("follow", { username: event.message[0].from });
                break;
            case "bits":
                addAlert("cheer", {
                    username: event.message[0].from,
                    bits: event.message[0].amount,
                    message: event.message[0].message,
                });
                break;
            default:
                console.warn(
                    `[StreamLabs] Event type ${event.type} not handled`,
                );
        }
    });

    slabsSocket.connect();
</script>
