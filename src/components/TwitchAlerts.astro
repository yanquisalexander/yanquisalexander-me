---
import "@speed-highlight/core/themes/dark.css";
---

<div id="twitch-alerts" class="fixed inset-0 flex items-center">
    <div class="text-white h-screen w-full hidden" id="alert-container">
        <div class="alert__text">
            <code
                class="shj-lang-js alert__text__message hidden !py-4 !px-4 !font-cascadia break-words whitespace-pre-wrap"
            ></code>
        </div>
    </div>
</div>

<script>
    import { highlightAll } from "@speed-highlight/core";
    import {
        extractTokenFromHead,
        createApiClient,
        createPubSubClient,
        createAuthProvider,
        BROADCASTER_ID,
    } from "@/lib/Twitch";
    import {
        type Alert,
        ALERTS,
        type AlertVariant,
    } from "@/lib/TwitchAlertVariants.ts";
    import confetti from "canvas-confetti";

    const token = extractTokenFromHead();

    const authProvider = createAuthProvider({ token });

    const apiClient = createApiClient({ authProvider });
    const pubSubClient = createPubSubClient({ authProvider });

    const TIME_BETWEEN_ALERTS = 5000;

    const AlertsQueue: Alert[] = [];

    const $alertContainer = document.getElementById("alert-container");
    const $alertMessage = document.querySelector(
        ".alert__text__message",
    ) as HTMLParagraphElement;

    const addAlert = (
        type: string,
        variables: Record<string, string | number>,
    ) => {
        const alert = ALERTS[type];
        if (!alert) {
            console.error(`Alert type ${type} not defined in ALERTS`);
            return;
        }

        AlertsQueue.push({
            type: type as Alert["type"],
            variants: alert.variants,
            variables: variables,
        });

        if (AlertsQueue.length === 1) {
            processAlertQueue();
        }
    };

    const processAlertQueue = async () => {
        const alert = AlertsQueue.shift();
        if (!alert) return;

        const { type, variants, variables } = alert;

        const applicableVariants = variants.filter((variant) => {
            if (type === "cheer" && variant.minBits) {
                return variant.minBits <= (variables?.bits ?? 0);
            }
            return true;
        });

        const variant: AlertVariant | null = applicableVariants.reduce(
            (highest: AlertVariant | null, current: AlertVariant) => {
                if (
                    !highest ||
                    (current.minBits ?? 0) > (highest.minBits ?? 0)
                ) {
                    return current;
                }
                return highest;
            },
            null,
        );

        if (!variant) {
            console.error("No variant found for alert", alert);
            return;
        }

        const replaceVariables = (template: string) => {
            if (!variables) return template;
            return Object.entries(variables).reduce(
                (str: string, [key, value]) => {
                    // Si key es message, poner dentro de un párrafo
                    if (key === "message") {
                        return str.replace(
                            new RegExp(`\\$${key}`, "g"),
                            `<p>${value.toString()}</p>`,
                        );
                    }
                    return str.replace(
                        new RegExp(`\\$${key}`, "g"),
                        value.toString(),
                    );
                },
                template,
            );
        };

        const $alertMessage = document.querySelector(
            ".alert__text__message",
        ) as HTMLParagraphElement;

        if (variant.audioSrc) {
            const audio = new Audio(variant.audioSrc);
            audio.volume = variant.volume ?? 1;
            audio.play();
        }

        if (variant.messageTemplate) {
            $alertMessage.innerHTML = replaceVariables(variant.messageTemplate);
            $alertMessage.classList.remove("hidden");
        } else {
            $alertMessage.classList.add("hidden");
        }

        await highlightAll({
            hideLineNumbers: false,
        });

        const $alertContainer = document.getElementById("alert-container");
        $alertContainer?.classList.remove("hidden");
        $alertContainer?.classList.add("animate-fade-in-up");

        if (variant.effect === "confetti") {
            confetti({
                particleCount: 100,
            });
        }

        setTimeout(() => {
            $alertContainer?.classList.remove("animate-fade-in-up");
            $alertContainer?.classList.add("animate-fade-out-down");
        }, variant.duration ?? 5000);

        setTimeout(
            () => {
                $alertContainer?.classList.add("hidden");
                $alertContainer?.classList.remove("animate-fade-out-down");
                processAlertQueue();
            },
            (variant.duration ?? 5000) + TIME_BETWEEN_ALERTS,
        );
    };

    // Simulación inicial de un evento de cheer
    const simulateCheer = () => {
        addAlert("cheer", {
            username: "username",
            bits: 222,
            message: "Holaaaa, estos son 222 bits de prueba",
        });
    };

    // Llama a la función para simular un cheer
    simulateCheer();
</script>
